非对称算法（即公钥算法）与注入AES或DES的对称算法完全不同。
对称算法的问题：
密钥分配问题：a和b必须使用一个安全的信道建立密钥。请记住，消息传递所使用的通信链路时不安全的，所以，尽管直接在该信道上传输密钥时最贱的消息密钥分配方式，但是是不可取的。
密钥个数：即使解决了密钥分配的问题，我们还需要处理大量的密钥。在拥有n个用户的网络中，如果没对用户之间都需要一个单独的密钥对，则整个网络需要的密钥对数是：n*（n-1）/2。且每个员工都需要安全的存储n-1个密钥。
对alice和bob的欺骗没有防御机制：alice和bob能力相同，因为它们拥有的密钥相同。因此，对于那些需要防止alice或bob欺骗的应用而言，堆成密码学是不能使用的。


非对称密码学的基本原理：
为了克服这些缺点，diffie和hellman和merkle提出了：加密者（alice）用来加密消息的密钥没有必要保密。重要的部分在于，接收者bob只有使用密钥才能解密。
公钥密码学的实用性：
公钥算法的主要安全机制：
1.密钥建立：在不安全信道上建立密钥的协议有若干种，包括Diffie-Hellman密钥交换协议或rsa密钥传输协议。
2.不可否认性：可以通过数字签名算法（如rsa，dsa）实现不可否认性和消息完整性。
3.身份标识：在类似引号只能卡或者手机等应用中，可以使用质询-响应协议与数字签名相结合的方法识别实体。
4.加密：可使用类似rsa或elgamal的算法对消息进行加密。
看上去，公钥方案似乎可以提供先到安全协议所需要的一切功能。尽管事实也确实如此但是实际中公钥方案的主要缺点在于：使用公钥算法对数据进行加密的计算量非常大--通俗说，就是非常慢。因此，实际的数据加密基本上都不用公钥加密。
此外，对称算法在提供不可否认性和密钥建立功能方面表现平平。为了充分利用这两者的优点，更使用的协议一般是混合协议，即对称密钥算法和公钥算法的综合。混合协议的例子包括常用于安全的web连接的ssl/tls协议，或作为Internet通信协议一部分的IPsec。


https/ssl过程：
1. 客户端向一个需要https访问的网站发起请求。
2. 服务器将证书发送给客户端进行校验。证书里面包含了其公钥。这里要特别说一下客户端到底 如何来校验对方发过来的数字证书是否有效。
首先在本地电脑寻找是否有这个服务器证书上的ca机构的根证书。如果有继续下一步，如果没有弹出警告。
使用ca机构根证书的公钥对服务器证书的指纹和指纹算法进行解密。
得到指纹算法之后，拿着这个指纹算法对服务器证书的摘要进行计算得到指纹。
将计算出的指纹和从服务器证书中解密出的指纹对比看是否一样如果一样则通过认证。

3. 校验成功之后，客户端会生成一个随机串然后使用服务器证书的公钥进行加密之后发送给服务器。
4. 服务器通过使用自己的私钥解密得到这个随机值。
5. 服务器从此开始使用这个随机值进行对称加密开始和客户端进行通信。
6. 客户端拿到值用对称加密方式 使用随机值进行解密。
 
为什么不一直使用非对称进行加密，而是在类似握手之后开始使用对称加密算法进行https通信：
非对称加密的消耗和所需的计算以及时间远比对称加密消耗要大，所以在握手和认证之后，服务器和客户端就开始按照约定的随机串，对后续的数据传输进行加密

具有实用性的公钥算法家族：
整数分解算法：有效公钥方案就是基于这样的一个事实：因式分解大整数是非常困难的。这类算法最突出的代表就是RSA。
离散对数方案：如elgamal，DSA
椭圆曲线方案：df
