使用ReentrantLock类：
在多线程中，可以使用synchronized关键字来实现线程间的同步互斥，但在jdk1.5中增加了
ReentrantLock类也能达到同样的效果，并且在拓展功能上更加强大，比如具有嗅探锁定，多路
分支通知等功能，而且在使用上也比synchronized更加灵活。
使用：Lock lock = new ReentrantLocak（）；
lock.lock()锁定lock.unlock()释放。
使用condition实现等待/通知：
*关键字synchronized与wait和notify，notifyAll方法相结合可以实现等待/通知模式，类
ReentrantLock也可以实现同样的功能，但要借助Condition对象。Condition类是Jdk5中出现的技
术，使用它有更好的灵活性，比如可以实现多路通知功能。而他的优点就是可以选择性通知。
使用：Condition condition = （某个锁）lock.newCondition();
wait（）相当于Condition的await（）；
wait（long timeout）相当于await(long time，TimeUnit unit)；
notify相当于signal（）；
notifyAll相当于signalAll（）；

公平锁不公平锁：
Lock分为公平锁和不公平锁，公平锁表示线程获取锁的顺序是按照县城加锁的顺序来分配的，即
先进先出。而非公平锁是随机的。
使用：Lock lock = newReentrantLock（true/false）；
方法int getHoldCount（）：查询当前线程保持此锁定的个数，也就是调用2lock（）方法的次数。
方法int getQueueLength（）：返回正在等待获取此锁定的线程估计数。
方法int getWaitQueueLength（Condition condition）：返回等待与此锁定相关的给定条件Condition的线程计数。 就是用了condition的线程数。
方法boolean hasQueuedThread（Thread thread）：查询指定的线程是否正在等待获取此锁定。
方法boolean hasQueueThreads（）：查询是否有线程正在等待获取此锁定。
方法boolean hasWaiters（Condition condition）：查询是否有线程正在等待与此锁定有关的condition条件。
方法boolean isFair （）：判断是否为公平锁。
方法boolean isHeldByCountThread（）：查询当前线程是否保持此锁定。
方法boolean isLocked（）：查询此锁定是否由任意线程保持。
方法void lockIntrrupttibly（）：如果当前线程未被中断，则获取锁定，如果已经中断则出现异常。


使用ReentrantReadWriteLock类：
读写锁，在没有写锁时，进行读取操作的多个线程都可以获取读锁，而上了写锁后，只有获取写
锁的才能进行写入。
用法：ReentrantReadWriteLock lock = new ReentrantReadWriteLock（）；
上锁：lock.readLock().Lock();(读锁) ；lock.writeLock().Lock();(写锁)
释放就是：unlock（）
就是“读写”，“写读”，“写写”都是互斥的；而“读读”是异步，非互斥的。
