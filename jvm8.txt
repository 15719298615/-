虚拟机字节码执行引擎
运行时栈帧结构：
栈帧是用于支持虚拟机进行运行方法调用和方法执行的数据结构，他是虚拟机运行时数据区中的
虚拟机栈的栈元素。栈帧存储了方法的局部变量表，操作数栈，动态链表和方法返回地址等信
息。每一个方法从调用开始至执行完成的过程，都对应着一个栈帧在虚拟机里面从入栈到出栈的
过程。

接下来详细讲一下栈帧中的局部变量表，操作数栈，动态链接，方法返回地址等各个部分的作用和数据结构。
局部变量表：
局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。在java程序
编译为Class文件时，就在方法的Code属性文件的max_locals数据项中确定了该方法所需要分配
的局部变量表的最大容量。
操作数栈：
操作数栈也常称为“操作站”，他是一个先进后出栈。同局部变量表一样，操作数栈的最大深度也
在编译的时候写入到Code属性的max_stacks数据项中。操作数栈的每一个元素可以是任意的
java数据类型。包括long和double。
动态链接：
每个栈帧都包含一个指向运行时常量池中该栈帧锁属方法的引用，持有这个引用是为了支持方法
调用过程中的动态链接。
方法返回地址：
在方法退出时，都需要返回到方法被调用的位置。
方法调用：
方法调用不等于方法执行，方法调用阶段唯一的任务就是确定被调用的方法的版本号（即调用哪
一个方法）暂时还不涉及方法内部的具体运行过程。在程序运行时，进行方法调用是最普遍，最
频繁的操作。
解析：
所有方法调用中的目标方法在Class文件里面都是一个常量池中的符号引用，在类加载的解析阶
段，会将其中一部分符号引用转化为直接引用。
