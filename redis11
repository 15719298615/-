本处将介绍三种非常有价值的降低redis内存占用率的方法。降低redis的内存占用有助于减少创建快照和加载快照所需要的时间，提升载入AOF文件和重写AOF文件时的效率，缩短从服务器进行同步所需的时间，并且让redis存储更多的数据而无添加额外的硬件。

短结构：
在列表，散列和有序集合的长度较短或者较小时，redis可以选择使用一种名为压缩列表的紧凑存储方式来存储这些结构。压缩列表是列表，散列和有序集合这三种不同类型的对象的一种非结构化表示：与redis在通常情况下使用双链表表示列表，使用散列表表示散列，使用散列表加上跳跃表（skiplist）表示有序集合的做法不同，压缩列表会以序列化的方式存储数据，这些序列化数据每次被读取的时候都要进行解码，每次被写入的时候也要进行局部的重写编码，并且有可能需要对内存里的数据进行移动。
为什么压缩列表更节约，因为链表的节点间的额外开销太多了。而压缩列表只是由节点组成的序列，更加节省。

当一个结构突破了用户为压缩列表或者整数集合设置的限制条件时，redis就会自动将它转换为更为典型的底层数据结构。这样做的主要原因在于，随着紧凑结构的提及变的越来越大，操作这些结构的速度也会变的越来越慢。


Redis分片（分区）
v分区的概念
分区是分割数据到多个Redis实例的处理过程，因此每个实例只保存key的一个子集。
　　如果只使用一个redis实例时，其中保存了服务器中全部的缓存数据，这样会有很大风险，如果单台redis服务宕机了将会影响到整个服务。解决的方法就是我们可以采用分片/分区的技术，将原来一台服务器维护的整个缓存，现在换为由多台服务器共同维护内存空间。
分片的实现
说明与分析：
　关于redis的安装参照上一篇，默认安装好了redis.
　　思路：采用在一台主机上实现分片的方式，所以只需要在该主机上配置启动三台redis的实例即可。因为redis默认使用的端口号为6379，所以这里我们分别使用6379、6380以及6381三个端口来实现。
分区的不足：
分区是多台redis共同作用的，如果其中一台出现了宕机现象，则整个分片都将不能使用，虽然是在一定程度上缓减了内存的压力，但是没有实现高可用。
涉及多个key的操作通常是不被支持的。举例来说，当两个set映射到不同的redis实例上时，你就不能对这两个set执行交集操作。
涉及多个key的redis事务不能使用。
当使用分区时，数据处理较为复杂，比如你需要处理多个rdb/aof文件，并且从多个实例和主机备份持久化文件。
　　高可用的解决方案：可以采用哨兵机制实现主从复制从而实现高可用。
