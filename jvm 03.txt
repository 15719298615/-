垃圾收集与内存分配策略

2019.10.11
概述：
*第二章介绍了java内存运行时区域的各个部分，其中程序计数器，虚拟机栈，本地方法栈三个区
域随线程而生，随线程而灭；栈中的栈帧随着方法的进入和退出有条不紊的执行着出栈和入栈操
作。每一个栈帧中分配多少内存基本上是在类结构确定下来时就已经知道了，因此这几个区域的
内存分配和回收都具有确定性，在这几个区域就不用考虑过多的回收问题，因为方法结束或者线
程结束时，内存自然就跟随着回收了。
*而java堆和方法区则不一样，一个接口中多个实现类需要的内存可能不一样，一个方法中的多个
分支需要的内存也可能不一样，我们只有在程序处于运行期间才会知道要创建那些对象，这部分
内存的分配和回收都是动态的，垃圾收集器所关注的就是这部分内存。
对象已死吗：
垃圾收集器在对堆进行垃圾回收前，第一件事就是确定这些对象中有哪些对象还“存活着”那些对
象已经“死去”（即不可能在被任何途径使用的对象）
引用计数算法：
很多教科书判断对象是否存活使用的算法就是这个：给对象中添加一个引用计数器，没当一个地
方引用他时，计数器加一，当引用失效时减一，任何时刻计数器为0的对象就是不可能在被使用
的的。（这个算法不错也有很多著名的例子，但是主流java虚拟机不使用这个算法来管理内存，
其中最主要的原因是他很难解救对象之间相互循环引用的问题）
可达性分析算法：（复习时搜下图片）
*在主流的商用程序的主流实现中，都是称通过可达性分析来判定对象是否存活。
*这种算法的基本思路就是通过一系列的称为”GC Roots“的对象作为起点，从这个节点开始向下
搜索，搜索走过的路径称为引用链（reference chain），当一个对象到GC Roots没有任何引用
链时（就是从GC Roots到这个对象不可达），则证明此对象是不可用的。
*在java中可作为GC Roots的对象包括：虚拟机栈（栈中的本地变量表）中引用的对象，方法去
中类静态属相引用的对象，方法去中敞亮引用的对象，本地方法栈中JNI（即一般说的Native方
法）引用的对象。
再谈引用：
*无论是通过计数器算法判断对象的引用数量，还是通过可达性分析算法判断对象的引用链是否可
达，判断对象是否存活都与“引用”有关。
*在jdk1.2之后，java对引用的概念进行了扩充，将引用类型分为强引用，软引用，弱引用，虚引
用四种。
*强引用：指在程序代码中普遍存在的，类似“Object obj = new Object（）”这类引用，只要强引
用还存在，垃圾收集器永远不会回收掉被引用的对象。
*软引用：描述一些还有用但并非必须的对象。对于软引用关联着的对象，在系统将要发生内存溢
出异常之前，将会把这些对象列进回收范围之中进行二次回收，如果这次回收还没有足够的内
存，才会抛出内存溢出异常。（jdk1.2后提供了SoftReference类来实现软引用）
*弱引用：也是用来描述非必须对象的，但他的强度比软引用更弱一些，被弱引用关联的对象只能
生存到下次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被
弱引用关联的对象。（jdk1.2之后提供了WeakReference类实现弱引用）
*虚引用：也称为幽灵引用或幻影引用，他是最弱的一种引用关系。一个对象是否有虚引用，完全
不会对其生存时间构成影响，也无法通过虚引用来取得一个对象的实例。为一个对象设置虚引用
的唯一目的就是能在这个对象被收集器收集时收到一个系统通知。（jdk1.2之后提供了
PhantomReference类来实现）
生存与死亡：
*即使是可达性算法中不可达的对象也并不是“非死不可”而是处在“缓刑”阶段，要真正的让一个对
象死亡，至少经过两次标记过程：如果对象在可达性分析后与GC Roots 没有相连接的引用链，
那么他会被第一次标记并且进行一次筛选，筛选条件为是否有必要执行finalize（）方法。当对象
没有覆盖finalize（）方法，或finalize（）已经被虚拟机调用过了，都视为没有必要执行。
*如果如果这个对象有必要执行finalize（）方法，那么finalize（）是对象逃脱死亡的最后一次机
会，这个对象会被放在一个叫做F-Queue的队列中，稍后Gc将对F-Queue中的对象进行第二次的
小规模标记，对象只要在finalize（）中重新与引用链上的任何一个对象建立关联即可，例如
this，那么他将被移出“即将回收”的集合；如果对象这时候还没有逃脱，那么基本上他就真的被回
收了。
*finalize（）方法只会被系统调用一次。
回收方法区：
*在堆中，尤其是新生代中，常规应用进行一次垃圾收集一般可以回收70%~90%，而永久代的垃
圾收集效率远低于此。
*永久代的垃圾收集主要回收两部分：废弃常量和无用的类。
*回收常量池与java堆中的对象非常类似。判断一个常量是否为废弃常量，当没有地方引用这个常
量就被回收。
*判断一个类是否为无用的类就比较严苛，需要同时满足以下三个条件才是“无用的类”：
1.该类所有的实例都已经被回收，也就是java堆中不存在该类的任何实例。
2.加载该类的classloader已经被回收。
3.该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该
类的方法。
*在大量使用反射，动态代理，CgLib等ByteCode框架，动态生成jsp以及OSGi这类频繁使用自定
义classLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。
垃圾收集算法：
1.标记-清除算法（最基础的收集算法）
*如他的名字一样，算法分为：“标记”和“清除”：首先标记所有需要回收的对象，在完成标记
后统一回收所有被标记的对象。（标记分为：存活对象，可回收，未使用）
*他的主要不足有两个：1.效率问题，标记和清楚两个过程效率都不高。2.空间问题，标记清
除后会产生大量的不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要
分配较大的对象时，无法找到足够的连续内存而不得不提前出发另一次垃圾收集动作。
2.复制算法
*他将可用内存分为大小相等的两部分，每次只使用其中一块。当这一块使用完了，就将还存
活的对象复制到另一块上，然后把已经使用过的这一块一次性清理掉。这样使每次都是对整
个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂的情况，只要移动堆顶指
针，按顺序分配内存即可，简单实现，运行高效。
*只是这种算法的代价是将内存缩小为原来的一半。
*现在大多数商业虚拟机都使用的是这种算法来收集新生代，将内存划分为一块较大的Eden
和两块较小的survivor空间，每次使用Eden和另一块survivor。当回收时，将Eden和survivor
中还存活的对象一次性复制到另一块survivor上，然后清理Eden和survivor。
*HotSpot虚拟机默认Eden和survivor的大小比例是8：1.
3.标记-整理算法
*复制收集算法在对象存活率较高的时候就要进行较多的复制操作，效率将会变低。所以老年
代一般不能直接选用这种算法。
*根据老年代的特性，有人提出这种算法，标记过程仍然和“标记-清除”过程一样，但后续步骤
不是直接对可回收对象进行清理，而是让所有存活得对象都向一端移动，然后直接清理掉端
边界以外的内存。
4.分代收集算法（当前商业虚拟机都采用这种）
*这种算法并没有什么新的思维，只是根据对象的存活周期将内存划分为几块。
*一般是将java划分为新生代和老年代，这样就可以根据各个年代的特点采用最适合的算法。
*在新生代中，每次都有大量的对象死去，只有少量存活，那就用复制算法，只需要付出少量
的存活对象的复制成本就可以完成收集。
*而老年代中因为对象的存活率高，没有额外空间对他进行分配担保，就必须使用”标记-清
除“或者”标记-整理“算法来进行回收。
枚举根节点：
*可达性分析对执行时间的敏感度还体现在GC停顿上，因为这项工作必须在一个能确保一致性的
快照中进行，这里的一致性是指整个分析期间整个执行系统看起来就像被冻结在某个节点上，不
可以出现分析过程中对象引用关系还在不断地变化的情况，该点不满足的话分析结果的准确性就
无法得到保证。
*目前主流的java虚拟机使用的都是准确式GC，所以当执行系统停顿下来后，并不需要一个不漏
地检查完所有执行上下文和全局的引用位置。
*在HotSpot的实现中，是使用一组称为OopMap的数据结构来达到这个目的的，在类加载完成的
时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在jit编译过程中，也会在特
定的位置记录下栈和寄存器中那些位置是引用。这样，GC在扫描时就可以直接得知这些信息
了。（eg:OopMap{ebx=Oop [16]=Oop off=142}）
安全点：
*在OopMap的协助下，HotSpot可以快速切准确的完成Gc Roots枚举，但是OopMap内容变化的
指令非常多，如果为每一条指令都生成对应的OopMap，那么会需要大量的额外空间，这样GC的
空间成本将会变得很高。
*实际上HotSpot也的确没有为每条指令都生成OopMap，前面提到，只是在”特定的位置“记录了
这些信息，这些位置称为安全点，即程序并非在所有地方都能停顿下来开始GC，只有在到达安
全点时才能暂停。
*而如何在GC发生时，让所有线程都”跑“到最近的安全点上在停顿下来。有两种方案：主动式中
断和抢先式中断。
安全区域：
*安全点解决了程序执行时，可是如果程序不执行呢。
*安全区域就是指在一段代码片段中，引发关系不会发生变化。在这个区域中的任意地方开始GC
都是安全的。我们也可以把Safe Region看作是被扩展了的SafePoint。
垃圾收集器（重点）
名词解释(在垃圾收集器的上下文语境中)：
*并行(Parallel):指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。
*并发(Concurrent):用户线程和多条垃圾收集线程同时执行，但不一定是并行的，可能会交替执
行，用户程序在继续运行，而垃圾收集线程运行在另一个cpu上。
*如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。
HotSpot虚拟机所包含的所有收集器


*展示了七种作用域不同分代的收集器，如果两个收集器之间存在连线，就说明他们可以搭配使
用。虚拟机所处的区域则代表他是属于新生代还是老年代的收集器。
*Serial收集器：（使用复制算法）新生代收集器
是最基本，发展历史最悠久的收集器，曾经（jdk1.3.1之前）是虚拟机新生代收集器的唯一
选择。
*这个收集器是一个单线程的收集器，但他的单线程并不代表只用一个cpu或者一条收集线程
去完成垃圾收集工作，更重要的是他在进行垃圾收集时，必须暂停其他所有的工作线程，直
到他收集结束。
*他的优点就是简单而高效，对于限定单个CPU的环境来说，Serial收集器由于没有线程交互
的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。在用户的桌面应用场景中，
分配给虚拟机管理的内存一般来说不会很大，停顿时间完全可以控制在几十毫秒最多一百多
毫秒以内，只要不是频繁发生，这点停顿还是可以接受的。所以，Serial收集器对于运行在
Client模式下的虚拟机来说是一个很好的选择。
*Serial Old收集器（使用“标记-整理”算法）老年代收集器
是serial的老年版，同样是一个单线程收集器，使用”标记-整理“算法。这个收集器的主要意
义也是给Client模式下的虚拟机使用。
下图是serial/serial old收集器运行图

*ParNew收集器（新生代采用“复制”算法，要暂停所有用户线程）新生代收集器
*他就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集之外，其余行为包括
Serial收集器可用的所有控制参数，收集算法，Stop The World，对象分配规则，回收策略
都与Serial收集器完全一样。
*虽然他除了多线程回收之外和Serial没有太大的差别但是他确是许多运行在Server模式下的
虚拟机中首选的新生代收集器，其中一个和性能无关的原因是可以和CMS收集器配合工
作。
下图是ParNew/Serial Old收集器运行图

*性能：ParNew收集器其实就是Serial收集器的多线程版本，使用多线程进行垃圾收集。
ParNew收集器在单CPU的环境中绝对不会比Serial收集器更好的效果，甚至由于存在线程交
互开销，该收集器在通过超线程技术实现的两个cpu的环境中都不能100%保证可以超越
Serial收集器。随着使用cpu数量的增加，它对GC时系统资源的有效利用还是有好处的。默
认开启垃圾收集线程数与CPU数相同，使用-XXl:ParallelGCThreads控制垃圾收集线程数。
*Parallel Scavenge收集器：（使用”复制“算法）新生代收集器
*并行的多线程收集器。
*Parallel Scavenge收集器的特点是他的关注点和别的收集器不同，CMS收集器的关注点是
尽可能地缩短垃圾收集时用户线程的停顿时间。而Parallel Scavenge收集器的目的则是达到
一个可控制的吞吐量。
*吞吐量= 运行用户代码时间/(运行用户代码时间+垃圾收集时间)。
*由于与吞吐量关系密切，Parallel Scavenge收集器也被称为”吞吐量优先“收集器。
*Parallel Old收集器：（使用”标记-整理“算法）
Parallel Scavenge的老年版，使用多线程。
以下为Parallel Scavenge/Parallel Old收集器的示意图

*CMS收集器（使用“标记-清除”算法）老年代收集器 并发

*从名字可以看出，并发-标记-清理，它的运作过程分为4步：
1.初始标记
这个阶段需要STW（stop the world），仅仅只标记GC Roots能直接关联到的对象，速度很快。
2.并发标记
进行GC Roots Tracing（追踪）的过程，从GC Roots开始从堆中对象进行可达性分析，找出存
活对象。
3.重新标记
这个阶段需要STW（stop the world），为了修正并发标记期间因用户程序继续运作而导致标记
产生变动的那一部分对象的标记记录，停顿时间：初始标记<重新标记<并发标记；
4.并发清除
对可回收区域进行清理，可与用户线程一起并发执行。

由于整个过程中好事最长的并发标记和并发清除过程收集器都可以和用户线程一起工作，所以，
从总体上讲，CMS收集器的内存回收过程是与用户线程一起并发执行的。
*CMS主要优点：并发收集，低停顿。它有三个缺点
1.CMS收集器对CPU资源非常敏感。在并发阶段虽然不会导致用户线程停顿，但是会占用一部分
CPU资源导致应用程序变慢，总吞吐量变低。（变慢）
2.无法处理浮动垃圾，可能出现“Concurrent Mode fail”失败导致一次full GC的产生。由于CMS并
发清理阶段用户线程还在运行，CMS无法在当次收集中处理它们，只好在下次gc中处理，这类垃
圾称为“浮动垃圾”。
3.“标记-清除”算法导致收集结束产生大量的空间碎片，老年代空间会随着应用时长被逐步耗尽，
最后将不得不通过担保机制对堆内存进行压缩。CMS也提供了参数：
-XX:CMSFullGCsBeForeCompaction(默认0，即每次都进行内存整理)来指定多少次CMS收集之
后，进行一次压缩的Full GC。
*G1收集器（与CMS不同的是G1整体上看起来是基于”标记-整理“算法，而局部上看是基于”复制“算法实现的收集器）

是当今收集器技术发展的最前沿的成果之一。是一款面向服务器端应用的垃圾收集器。
G1具备如下特点：
1.并行与并发：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短‘stop the 
world’停顿的时间，部分其他收集器需要停顿java线程执行的GC动作，G1收集器仍然可以通过并
发的方式让java用户线程继续执行。
2.分代收集
能采取不同的方式去处理新创建的对象、已经存活一段时间的对象，或者已经熬过多次gc的对
象。
3.空间整合
G1从整体来看是基于“标记-整理”算法实现，从局部上基于“复制算法”实现。这两种算法都不会产
生空间碎片。
4.可预测的停顿
降低停顿时间是G1和CMS共同关注点，但是G1还能建立可以预测的时间停顿模型，能让使用者
明确指定一个长度时间为M毫秒时间段内，垃圾收集时间不超过N毫秒。

在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。G1将整
个java堆分为多个大小点个灯的独立区域，虽然还保留着新生代和老年代的概念，但新生代和老
年代不在是物理隔离的了，他们都是一部分Region（不需要连续）的集合。

如果仅仅GC 新生代对象，我们如何找到所有的根对象呢？ 老年代的所有对象都是根么？那这样
扫描下来会耗费大量的时间。于是，G1引进了RSet的概念。它的全称是Remembered Set，作
用是跟踪指向某个heap区内的对象引用。实现原理是：虚拟机发现程序正在对Reference类型的
数据进行写操作时，会产生一个Write Barrier暂时中断写操作，检查Reference引用的对象是否处
于不同的Region之中（在分代的例子中就是检查是否老年代的对象引用了新生代中的对象），如
果是，便通过CardTable把相关的引用信息记录到被引用对象所属的Region的Remembered Set
中。当进行内存回收时，在GC根节点的枚举范围中加入Remembered Set及可保证不对全堆扫
描也不会有遗漏。

如果不计维护Remembere Set的操作，G1收集器的运作大致可以分为以下几个步骤：
G1收集器运作大致可以分为
1.初始标记
仅仅只是标记一下GC Roots能直接关联到的对象，并且修改iTAMS（Next Top at Mark 
Start）的值,让下一阶段用户程序运行时，能在正确可用的Region中创建对象，这个阶
段“stop the world”.
2.并发标记
从GC Roots开始从堆中对象进行可达性分析，找出存活对象，这个阶段耗时较长，但是可以
与用户线程并发执行。
3.最终标记
这个阶段是STW(stop the world),是为了修正在并发标记阶段用户程序继续运作而导致标记
产生变动的那一部分对象的标记记录，虚拟机将这段时间对象变化记录在Remembered Set 
Logs中，最终标记阶段需要把Remembered Set Logs的数据合并在Remembere Set中，这
个阶段标记线程也是并行执行的，通过参数-
XX:ParallelGCThread可设置GC暂停时可用的GC线程数。
4.筛选回收
这个阶段是STW(stop the world,在最后的筛选回收阶段对各个Region的回收价值和成本进行
排序，根据用户的GC停顿时间来指定回收计划，这个阶段也是并行执行的，从Sun公司的信
息来看，这个阶段也可以与用户程序一起并发执行，但是暂停用户线程能极大的提高回收的
效率。


2019.10.12
内存分配与回收策略：
*大多数情况下，对象在新生代Eden中分配。当Eden区没有足够的空间进行分配时，虚拟机
会发起一次Minor GC。
*大对象直接进入老年代，所谓大对象指的是需要大量连续内存空间的java对象，最典型的大
对象就是那种很长的字符串以及数组。
*虚拟机提供了一个-XX：PretenureSizeThreshoid参数，令大于这个设置值得对象直接在老
年代分配。这样做的目的是避
免在Eden和两个Survivor区之间发生大量的内存复制。
长期存活的对象将进入老年代：
*既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能够识别哪些对象能
够放在新生代，哪些对象放在老年代。
*为了做到这点，虚拟机给每个对象定义了一个对象年龄（Age）计数器。如果对象在Eden
出生并经历过一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor
空间中，并且对象年龄设为1。对象在Survivor区中每”熬过“一次Minor GC，年龄就加一岁，
当他的年龄加到一定程度（默认15），就会晋升到老年代。对象今生老年代的阈值，可以通
过参数-XX：MaxTenuringThreshold设置。
动态对象年龄判断：
虚拟机并不是永远要求对象的年龄必须达到了MaxTenuringThreshold才能晋升老年代，如
果在Survivor空间中相同年龄所
有对象大小的总和大于Survivor空间的一般，年龄大于或等于该年龄的对象就可以直接进入
老年代。
空间分配担保：
在发生minor gc之前，虚拟机会检测 : 老年代最大可用的连续空间>新生代all对象总空间？
          1、满足，minor gc是安全的，可以进行minor gc。
          2、不满足，虚拟机查看HandlePromotionFailure参数：
            （1）为true，允许担保失败，会继续检测老年代最大可用的连续空间>历次晋升到老
年代对象的平均大小。若大于，将尝试进行一次minor gc，若失败，则重新进行一
次full gc。
            （2）为false，则不允许冒险，要进行full gc（对老年代进行gc）。
