持久化选项：
redis提供了两种个不同的持久化方式来使数据存储到硬盘中。
一种方法叫快照，他可以将存在于某一刻的所有数据都写入硬盘里面。

另一种叫做只追加文件（append-only-file，aof），他会在执行写命令时，将被执行的写命令复制到硬盘里面。

这两种方法即可以同时使用又可以单独使用，在某些情况下甚至可以两种都不使用。
将内存中的数据存储到硬盘的一个主要原因是位了在之后重用数据，或是为了防止系统发生故障而将数据备份到一个远程位置。


持久化快照（RDB）：
缺点：在快照之间如果出现系统故障，或者系统崩溃，那么redis将丢失更新的数据。
创建快照的方式：
1.客户端可以通过向redis发送bgsave命令来创建快照。对于支持bgsave的平台来说（基本上所有平台都支持，除了windows平台），redis会调用fork来创建一个子进程，然后子进程负责将快照写入硬盘，而父进程则继续处理命令。
2.客户端还可以通过向redis发送save命令来创建一个快照，接到save命令的redis服务器在快照创建完成之前不在响应任何其他命令。save命令不常用，我们通常会在没有足够的内存去执行bgsave命令的情况下，又或者即使等待持久化操作完毕也无所谓的情况下，才会使用这个命令。
3.如果用户设置了save配置选项，比如：save  60  10000，那么从最近一次创建快照开始算起，当“60秒之内有10000次写入”这个条件被满足时，Redis就会自动出发bgsave命令。如果用户设置了多个save配置，那么当任意一个sava配置选项锁设置的条件被满足时，redis就会触发一次bgsave命令。
4.当redis通过shutdown命令接收到关闭服务器的请求时，或者接收到term信号时，会执行一个save命令，阻塞所有客户端，不在执行客户端发送的任何命令，并在save命令执行完毕之后关闭服务器。
5.当一个redis服务器连接另一个redis服务器，并向对方发送sync命令来开始一次复制操作时，如果主服务器目前没有在执行bgsave操作，或者主服务器并非刚刚执行完bgsave操作，那么主服务器就会执行bgsave命令。
在只是用快照持久化来保存数据时，一定要记住：如果系统真的发生崩溃，用户将丢失最近一次生成的快照之后更改的所有数据。因此，快照持久化只适用于那些即使丢失一部分数据也不会造成问题的应用程序。

大数据：
当redis存储的数据只有几个GB时，使用快照来保存数据是没有问题的。redis会创建子进程并将数据保存到硬盘里面。但当redis所占用的内存越来越多时，bgsave在创建子进程时耗费的时间也会越来越多。如果redis的内存占用达到数十个G，并且剩余的空间内存并不对，或者redis运行在虚拟机上面，那么执行bgsave可能会导致系统长时间的停顿，也可能引发系统大量的使用虚拟内存，从而导致redis的性能降低至无法使用的程度。
为了防止redis因为创建子进程而出现停顿，我们可以考虑关闭自动保存，转而通过手动发送save或者bgsave来进行持久化。手动一样会引发停顿，但是唯一的不同是用户可以控制停顿出现的时间。
并且save不象bgsave一样，save不需要创建子进程而导致redis停顿；而且因为没有子进程在争抢资源，所以save创建快照速度会比bgsave创建的速度快。


AOF持久化：
简单来说，aof持久化会将被执行的写命令写到AOF文件的末尾，以此来记录数据发生的变化。因此，Redis只要从头到尾重新执行一次AOF文件包含的所有写命令，就可以恢复AOF文件所记录的数据集。

appendfsync选项及同步频率：
always		每个redis写命令都要同步写入硬盘。这样做会严重降低Redis的速度。
everysec		每秒执行一次同步，显示的将多个写命令同步到硬盘。
no			让操作系统来决定应该合适进行同步。

AOF的缺陷：AOF文件的体积太小。
因为redis会不断的将被执行的写命令记录到AOF文件里，所以随着redis不断运行，AOF文件的体积也会不断的增长，在极端情况下，体积不断增大的AOF文件甚至可能会用完硬盘的所有可用空间。而且，因为在redis在重启之后需要通过重新执行AOF文件记录的所有写命令来还原数据集，所以如果AOF文件的体积非常大，那么还原操作执行的时间就可能会非常长。
为了解决AOF文件体积不断增大的问题，用户可以向Redis发送bgrewriteaof命令，这个命令会通过溢出AOF文件中的冗余命令来重写AOF文件，使AOF文件的体积尽可能的小。bgrewriteaof工作原理和bgsave创建快照的方式非常相似：redis会创建一个子进程，然后由子进程负责对AOF文件进行重写。因为aof文件重写也需要用到子进程，所以创建快照持久


复制：
复制可以让其他服务器拥有一个不断更新的数据副本，从而使的拥有数据副本的服务器可以用于处理客户端发送的读请求。关系型数据库通常会使用一个主服务器向多个从服务器发送更新，并使从服务器来处理所有读请求。redis也使用了同样的方式。


          旧版从服务器连接主服务器时的步骤
从服务器在进行同步时，会清空自己的所有数据：从服务器在与主服务器进行初始连接时，数据库中原有的所有数据都将丢失，并被替换成主服务器发送来的数据。


          redis不支持主主复制。
旧版复制功能的缺陷：                    
