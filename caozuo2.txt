物理内存与虚拟内存

分页与分段
页是信息的物理单位，分页是为了实现离散分配方式，以减少内存的外零头，提高内存的利用率。分页仅仅是由于系统管理的需要，而不是用户的需要。
段是信息的逻辑单位，它含有一组其意义相对完整的信息。分段的目的是为了能更好的满足用户的需要。
页的大小固定且由系统确定，把逻辑地址分为页号和页内地址两部分，由机器硬件实现的。因此一个系统只能由一种大小的页面。段的长度却不固定，决定于用户所编写的程序，通常由编写程序对源代码进行编辑时，根据信息的性质来划分。
分页的作业地址空间是一维的，即单一的线性空间。
分段的作业地址空间是二维的，程序在标识一个地址时，既需要给出段名，又需要给出段内地址。
页面置换算法
（了解大致原理，并能详述其中一种）

    最佳置换算法（Optimal Page Replacement Algorithm） 是将未来最久不使用的页替换出去，这听起来很简单，但是无法实现，但是这种算法可以作为衡量其他算法的基准
    最近不常使用算法（Not Recently Used Replacement Algorithm） 算法给每个页一个标志位，R表示最近被访问国，M表示被修改果。定期对R进行清零。算法的思路是首先淘汰那些未被访问过R=0的页，其次是被访问过R=1，未被修改过M=0的页，最后是R=1，M=1的页。
    先进先出页面置换算法（First-In，First-Out Page Replacement Algorithm） 算法的思想是淘汰在内存中最久的页，算法的性能接近与随机淘汰。并不好。
    改进型FIFO算法（Second Change Page Replacement Algorithm） 算法是在FIFO的基础上，为了避免置换出经常使用的页，增加一个标志位，如果最近使用过将R置为1，当页将会淘汰时，如果R为1，则不淘汰页，将R置为0.而那些R=0的页将会被淘汰时，直接淘汰。这首那个算法避免了经常被使用的页被淘汰。
    时钟替换算法（Clock Page Replacement Algorithm） 虽然改进型FIFO算法避免置换出常用的页，但由于需要经常移动页，效率并不高。因此在改进型FIFO算法的基础上，将队列首位相连形成一个环路，当缺页中断产生时，从当前位置开始找R=0的页，而所经过的R=1的页被置0，并不需要移动页。
    最久未使用算法（LRU Page Replacement Algorithm） LRU算法的思路是淘汰最近最长未使用的页。这种算法性能比较好，但实现起来比较困难。
