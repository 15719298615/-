类结构文件
代码编译的结果从本地机器码转变为字节码，是存储格式发展的一小步，却是编程语言发展的一大步。
无关性的基石：
*各种平台的虚拟机与所有平台都统一使用的程序存储格式-字节码，是构成平台无关性的基石。
*同时虚拟机还有另一种特性-语言无关性，现在已经有越来越多的语言运行在java虚拟机上。
*实现语言无关性的基础仍然是虚拟机和字节码存储格式。java虚拟机不和包括java在内的任何语
言绑定，他只与“Class文件”这种特定的二进制文件格式关联，Class文件中包换了java虚拟机指
令集和符号表以及若干其他辅助信息。
*java虚拟机是一个通用的，机器无关的执行平台。其他任何语言都可以将java虚拟机作为语言的
产品交付媒介。
*使用的任何语言都可以使用它对应的编译器编译成.class文件，然后被java虚拟机所接受
Class类文件的结构：（复习时网上搜）
*任何一个Class文件都对应着唯一一个类或接口，但反过来说，类或接口不一定都得定义在文件
里。（比如类或接口可以通过类加载器直接生成）
*Class文件是一组以8为字节为基础单位的二进制流，各个数据严格按照吮吸紧凑的排列在Class
文件中，中间没有添加任何分隔符，这使得整个Class文件中存储的内容几乎全是程序运行的必
要文件，没有空隙。
*根据java虚拟机规范，Class文件格式采用一种类似于C语言结构体的伪结构来存储数据，这种伪
结构中只有两种数据类型：无符号数和表。
魔数与Class文件的版本：
每个Class文件的头前4个字节（0-3）称为魔数，他的唯一作用是确定这个文件是否为一个
能被
虚拟机接受的Class文件。很多文件存储标准中都使用魔术来进行身份识别。
前四位（0-3）为0xCAFEBABE，第五六位（4-5）为次版本号，第7，8（6-7）位为主版本
号。
常量池：
*接着7，8位（6-7）主版本号之后的为常量池入口，常量池可以理解为Class文件之中的资
源仓库他是Class文件结构中与其他项目关联最多的数据类型，也是占用Class文件空间最大
的数据项目之一，同时他还是Class文件中第一个出现的表类型数据项目。
*在常量池的入口需要放置一项u2类型的数据，就是第9,10位（8-9），代表常量池容量计
数值。Class文件中只有常量池的容量计数是从1开始计数的。
*常量池主要存放两大类常量：字面量和符号引用。
*字面量比较接近于java语言的常量概念，比如文本符串，声明为final的常量值等。
*符号引用则属于编译原理方面的概念：包括了：类和接口的全限定名，字段的名称和描述
符，方法的名称和描述符这三类常量。
*常量池中的每一项常量都是一个表。（在jdk1.7之前有11中表，在jdk1.7之后为了更好地支
持动态语言调用，有额外增加了3种）
常量池的项目表

访问标志：
常量池结束后，紧接着的两个字节代表访问标志，这个标志用于识别一些类或者借口层次的
信息，包括：这个Class是类还是接口，是否为public，是否为abstract，如果是类的话是否
被声明为final等。
